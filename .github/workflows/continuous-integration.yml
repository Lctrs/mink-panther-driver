# https://help.github.com/en/categories/automating-your-workflow-with-github-actions

name: "Continuous Integration"

on:
  pull_request:
  push:
    branches:
      - "master"

env:
  REQUIRED_PHP_EXTENSIONS: "dom, gd, iconv, json, libxml, mbstring, Phar, SimpleXML, tokenizer, xml, xmlwriter, zip"

jobs:
#  coding-standards:
#    name: "Coding Standards"
#
#    runs-on: "ubuntu-latest"
#
#    strategy:
#      matrix:
#        php-version:
#          - "7.4"
#
#        dependencies:
#          - "locked"
#
#    steps:
#      - name: "Checkout"
#        uses: "actions/checkout@v2.0.0"
#
#      - name: "Install PHP with extensions"
#        uses: "shivammathur/setup-php@1.8.2"
#        with:
#          coverage: "none"
#          extensions: "${{ env.REQUIRED_PHP_EXTENSIONS }}"
#          php-version: "${{ matrix.php-version }}"
#
#      - name: "Validate composer.json and composer.lock"
#        run: "composer validate --strict"
#
#      - name: "Cache dependencies installed with composer"
#        uses: "actions/cache@v1.1.2"
#        with:
#          path: "~/.composer/cache"
#          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.lock') }}"
#          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"
#
#      - name: "Install lowest dependencies with composer"
#        if: "matrix.dependencies == 'lowest'"
#        run: "composer update --no-interaction --no-progress --no-suggest --prefer-lowest"
#
#      - name: "Install locked dependencies with composer"
#        if: "matrix.dependencies == 'locked'"
#        run: "composer install --no-interaction --no-progress --no-suggest"
#
#      - name: "Install highest dependencies with composer"
#        if: "matrix.dependencies == 'highest'"
#        run: "composer update --no-interaction --no-progress --no-suggest"
#
#      - name: "Run ergebnis/composer-normalize"
#        run: "composer normalize --dry-run"
#
#      - name: "Create cache directory for squizlabs/php_codesniffer"
#        run: "mkdir -p .build/php_codesniffer"
#
#      - name: "Cache cache directory for squizlabs/php_codesniffer"
#        uses: "actions/cache@v1.1.2"
#        with:
#          path: ".build/php_codesniffer"
#          key: "php-${{ matrix.php-version }}-php_codesniffer-${{ hashFiles('**/composer.lock') }}"
#          restore-keys: "php-${{ matrix.php-version }}-php_codesniffer-"
#
#      - name: "Run squizlabs/php_codesniffer"
#        run: "vendor/bin/phpcs"
#
#  dependency-analysis:
#    name: "Dependency Analysis"
#
#    runs-on: "ubuntu-latest"
#
#    strategy:
#      matrix:
#        php-version:
#          - "7.4"
#
#        dependencies:
#          - "locked"
#
#    steps:
#      - name: "Checkout"
#        uses: "actions/checkout@v2.0.0"
#
#      - name: "Install PHP with extensions"
#        uses: "shivammathur/setup-php@1.8.2"
#        with:
#          coverage: "none"
#          extensions: "${{ env.REQUIRED_PHP_EXTENSIONS }}"
#          php-version: "${{ matrix.php-version }}"
#
#      - name: "Cache dependencies installed with composer"
#        uses: "actions/cache@v1.1.2"
#        with:
#          path: "~/.composer/cache"
#          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.lock') }}"
#          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"
#
#      - name: "Install lowest dependencies with composer"
#        if: "matrix.dependencies == 'lowest'"
#        run: "composer update --no-interaction --no-progress --no-suggest --prefer-lowest"
#
#      - name: "Install locked dependencies with composer"
#        if: "matrix.dependencies == 'locked'"
#        run: "composer install --no-interaction --no-progress --no-suggest"
#
#      - name: "Install highest dependencies with composer"
#        if: "matrix.dependencies == 'highest'"
#        run: "composer update --no-interaction --no-progress --no-suggest"
#
#      - name: "Run maglnet/composer-require-checker"
#        run: "vendor/bin/composer-require-checker"
#
#  static-code-analysis:
#    name: "Static Code Analysis"
#
#    runs-on: "ubuntu-latest"
#
#    strategy:
#      matrix:
#        php-version:
#          - "7.4"
#
#        dependencies:
#          - "locked"
#
#    steps:
#      - name: "Checkout"
#        uses: "actions/checkout@v2.0.0"
#
#      - name: "Install PHP with extensions"
#        uses: "shivammathur/setup-php@1.8.2"
#        with:
#          coverage: "none"
#          extensions: "${{ env.REQUIRED_PHP_EXTENSIONS }}"
#          php-version: "${{ matrix.php-version }}"
#
#      - name: "Cache dependencies installed with composer"
#        uses: "actions/cache@v1.1.2"
#        with:
#          path: "~/.composer/cache"
#          key: "${{ matrix.php-version }}-composer-locked-${{ hashFiles('**/composer.lock') }}"
#          restore-keys: "${{ matrix.php-version }}-composer-locked-"
#
#      - name: "Install lowest dependencies with composer"
#        if: "matrix.dependencies == 'lowest'"
#        run: "composer update --no-interaction --no-progress --no-suggest --prefer-lowest"
#
#      - name: "Install locked dependencies with composer"
#        if: "matrix.dependencies == 'locked'"
#        run: "composer install --no-interaction --no-progress --no-suggest"
#
#      - name: "Install highest dependencies with composer"
#        if: "matrix.dependencies == 'highest'"
#        run: "composer update --no-interaction --no-progress --no-suggest"
#
#      - name: "Create cache directory for phpstan/phpstan"
#        run: "mkdir -p .build/phpstan"
#
#      - name: "Run phpstan/phpstan"
#        run: "vendor/bin/phpstan analyse --configuration=phpstan.neon.dist"
#
#      - name: "Create cache directory for vimeo/psalm"
#        run: "mkdir -p .build/psalm"
#
#      - name: "Run vimeo/psalm"
#        run: "vendor/bin/psalm --config=psalm.xml --shepherd --show-info=false --stats"
#
#  tests-chrome-chromedriver:
#    name: "Tests on Chrome stable with chromedriver"
#
#    runs-on: "ubuntu-latest"
#
#    strategy:
#      matrix:
#        php-version:
#          - "7.2"
#          - "7.3"
#          - "7.4"
#
#        dependencies:
#          - "lowest"
#          - "locked"
#          - "highest"
#
#        exclude:
#          # Covered by the "Code Coverage" job
#          - php-version: "7.4"
#            dependencies: "locked"
#
#    steps:
#      - name: "Checkout"
#        uses: "actions/checkout@v2.0.0"
#
#      - name: "Install PHP with extensions"
#        uses: "shivammathur/setup-php@1.8.2"
#        with:
#          coverage: "none"
#          extensions: "${{ env.REQUIRED_PHP_EXTENSIONS }}"
#          php-version: "${{ matrix.php-version }}"
#
#      - name: "Cache dependencies installed with composer"
#        uses: "actions/cache@v1.1.2"
#        with:
#          path: "~/.composer/cache"
#          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.lock') }}"
#          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"
#
#      - name: "Install lowest dependencies with composer"
#        if: "matrix.dependencies == 'lowest'"
#        run: "composer update --no-interaction --no-progress --no-suggest --prefer-lowest"
#
#      - name: "Install locked dependencies with composer"
#        if: "matrix.dependencies == 'locked'"
#        run: "composer install --no-interaction --no-progress --no-suggest"
#
#      - name: "Install highest dependencies with composer"
#        if: "matrix.dependencies == 'highest'"
#        run: "composer update --no-interaction --no-progress --no-suggest"
#
#      - name: "Run unit tests with phpunit/phpunit"
#        env:
#          PANTHER_CHROME_DRIVER_BINARY: "${{ env.CHROMEWEBDRIVER }}"
#        run: |
#          vendor/bin/mink-test-server > /dev/null 2>&1 &
#          vendor/bin/phpunit --configuration=phpunit.xml.dist

  tests-chrome-selenium:
    name: "Tests on Chrome stable with Selenium"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
#          - "7.2"
#          - "7.3"
          - "7.4"

        dependencies:
#          - "lowest"
          - "locked"
#          - "highest"

    services:
      selenium:
        image: "selenium/standalone-chrome:latest"
        ports:
          - "4444/tcp"
        volumes:
          - "${{ env.CHROMEWEBDRIVER }}:${{ env.CHROMEWEBDRIVER }}"
        options: --health-cmd /opt/bin/check-grid.sh --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.0.0"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@1.8.2"
        with:
          coverage: "none"
          extensions: "${{ env.REQUIRED_PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v1.1.2"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install lowest dependencies with composer"
        if: "matrix.dependencies == 'lowest'"
        run: "composer update --no-interaction --no-progress --no-suggest --prefer-lowest"

      - name: "Install locked dependencies with composer"
        if: "matrix.dependencies == 'locked'"
        run: "composer install --no-interaction --no-progress --no-suggest"

      - name: "Install highest dependencies with composer"
        if: "matrix.dependencies == 'highest'"
        run: "composer update --no-interaction --no-progress --no-suggest"

      - name: "Run unit tests with phpunit/phpunit"
        env:
          BROWSER_NAME: "chrome"
          SELENIUM_HOST: "localhost"
          SELENIUM_PORT: "${{ job.services.selenium.ports['4444'] }}"
        run: |
          vendor/bin/mink-test-server > /dev/null 2>&1 &
          vendor/bin/phpunit

#  code-coverage:
#    name: "Code Coverage"
#
#    runs-on: "ubuntu-latest"
#
#    strategy:
#      matrix:
#        php-version:
#          - "7.4"
#
#        dependencies:
#          - "locked"
#
#    steps:
#      - name: "Checkout"
#        uses: "actions/checkout@v2.0.0"
#
#      - name: "Install PHP with extensions"
#        uses: "shivammathur/setup-php@1.8.2"
#        with:
#          coverage: "pcov"
#          extensions: "${{ env.REQUIRED_PHP_EXTENSIONS }}"
#          php-version: "${{ matrix.php-version }}"
#
#      - name: "Cache dependencies installed with composer"
#        uses: "actions/cache@v1.1.2"
#        with:
#          path: "~/.composer/cache"
#          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.lock') }}"
#          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"
#
#      - name: "Install lowest dependencies with composer"
#        if: "matrix.dependencies == 'lowest'"
#        run: "composer update --no-interaction --no-progress --no-suggest --prefer-lowest"
#
#      - name: "Install locked dependencies with composer"
#        if: "matrix.dependencies == 'locked'"
#        run: "composer install --no-interaction --no-progress --no-suggest"
#
#      - name: "Install highest dependencies with composer"
#        if: "matrix.dependencies == 'highest'"
#        run: "composer update --no-interaction --no-progress --no-suggest"
#
#      - name: "Install pcov/clobber"
#        run: "composer require pcov/clobber"
#
#      - name: "Clobber the Xdebug driver"
#        run: "vendor/bin/pcov clobber"
#
#      - name: "Collect code coverage with pcov and phpunit/phpunit"
#        env:
#          PANTHER_CHROME_DRIVER_BINARY: "${{ env.CHROMEWEBDRIVER }}"
#        run: |
#          vendor/bin/mink-test-server > /dev/null 2>&1 &
#          vendor/bin/phpunit --configuration=phpunit.xml.dist --coverage-clover=.build/logs/clover.xml
#
#      - name: "Send code coverage report to Codecov.io"
#        env:
#          CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"
#        run: "bash <(curl -s https://codecov.io/bash)"
#
#  approve:
#    name: "Approve"
#
#    runs-on: "ubuntu-latest"
#
#    needs:
#      - "code-coverage"
#      - "coding-standards"
#      - "dependency-analysis"
#      - "static-code-analysis"
#      - "tests-chrome-chromedriver"
#      - "tests-chrome-selenium"
#
#    steps:
#      - name: "Approve"
#        uses: "hmarr/auto-approve-action@v2.0.0"
#        if: "(github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]') && github.event_name == 'pull_request' && startsWith(github.event.pull_request.title, 'Build(deps-dev)')"
#        with:
#          github-token: "${{ secrets.AUTO_APPROVE_TOKEN }}"
