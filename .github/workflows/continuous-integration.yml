# https://help.github.com/en/categories/automating-your-workflow-with-github-actions

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - "**"

name: "Continuous Integration"

jobs:
  coding-standards:
    name: "Coding Standards"

    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v1.1.0

      - name: "Install PHP with extensions"
        uses: shivammathur/setup-php@1.5.5
        with:
          coverage: none
          extension-csv: dom, iconv, json, libxml, mbstring, Phar, SimpleXML, tokenizer, xml, xmlwriter, zip
          php-version: 7.2

      - name: "Validate composer.json and composer.lock"
        run: $(which composer) validate --strict

      - name: "Cache dependencies installed with composer"
        uses: actions/cache@v1.0.2
        with:
          path: ~/.composer/cache
          key: php7.2-composer-locked-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            php7.2-composer-locked-

      - name: "Install locked dependencies with composer"
        run: $(which composer) install --no-interaction --no-progress --no-suggest

      - name: "Run localheinz/composer-normalize"
        run: $(which composer) normalize --dry-run

      - name: "Run doctrine/coding-standard"
        run: vendor/bin/phpcs

  dependency-analysis:
    name: "Dependency Analysis"

    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v1.1.0

      - name: "Install PHP with extensions"
        uses: shivammathur/setup-php@1.5.5
        with:
          coverage: none
          extension-csv: dom, iconv, json, libxml, mbstring, Phar, SimpleXML, tokenizer, xml, xmlwriter, zip
          php-version: 7.3

      - name: "Cache dependencies installed with composer"
        uses: actions/cache@v1.0.2
        with:
          path: ~/.composer/cache
          key: php7.3-composer-locked-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            php7.3-composer-locked-

      - name: "Install locked dependencies with composer"
        run: $(which composer) install --no-interaction --no-progress --no-suggest

      - name: "Run maglnet/composer-require-checker"
        run: vendor/bin/composer-require-checker

  static-code-analysis:
    name: "Static Code Analysis"

    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v1.1.0

      - name: "Install PHP with extensions"
        uses: shivammathur/setup-php@1.5.5
        with:
          coverage: none
          extension-csv: dom, iconv, json, libxml, mbstring, Phar, SimpleXML, tokenizer, xml, xmlwriter, zip
          php-version: 7.4

      - name: "Cache dependencies installed with composer"
        uses: actions/cache@v1.0.2
        with:
          path: ~/.composer/cache
          key: php7.4-composer-locked-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            php7.4-composer-locked-

      - name: "Install locked dependencies with composer"
        run: $(which composer) install --no-interaction --no-progress --no-suggest

      - name: "Run phpstan/phpstan"
        run: vendor/bin/phpstan analyse

  tests-chrome-chromedriver:
    name: "Tests on Chrome stable with chromedriver"

    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version:
          - 7.2
          - 7.3
          - 7.4

        dependencies:
          - lowest
          - locked
          - highest

        exclude:
          # Covered by the "Code Coverage" job
          - php-version: 7.4
            dependencies: locked

    steps:
      - name: "Checkout"
        uses: actions/checkout@v1.1.0

      - name: "Install PHP with extensions"
        uses: shivammathur/setup-php@1.5.5
        with:
          coverage: none
          extension-csv: dom, iconv, json, libxml, mbstring, Phar, SimpleXML, tokenizer, xml, xmlwriter, zip
          php-version: ${{ matrix.php-version }}

      - name: "Install chromedriver"
        run: |
          mkdir -p .build/chromedriver
          chromeversion=$(google-chrome --product-version)
          chromeversion=${chromeversion%.*}
          curl -LsS -o .build/chromedriver/chromedriver.zip https://chromedriver.storage.googleapis.com/$(curl -L https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${chromeversion})/chromedriver_linux64.zip
          unzip .build/chromedriver/chromedriver.zip -d .build/chromedriver

      - name: "Cache dependencies installed with composer"
        uses: actions/cache@v1.0.0
        with:
          path: ~/.composer/cache
          key: php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-

      - name: "Install lowest dependencies with composer"
        if: matrix.dependencies == 'lowest'
        run: $(which composer) update --no-interaction --no-progress --no-suggest --prefer-lowest

      - name: "Install locked dependencies with composer"
        if: matrix.dependencies == 'locked'
        run: $(which composer) install --no-interaction --no-progress --no-suggest

      - name: "Install highest dependencies with composer"
        if: matrix.dependencies == 'highest'
        run: $(which composer) update --no-interaction --no-progress --no-suggest

      - name: "Run unit tests with phpunit/phpunit"
        env:
          PANTHER_CHROME_DRIVER_BINARY: .build/chromedriver/chromedriver
        run: |
          vendor/bin/mink-test-server > /dev/null 2>&1 &
          vendor/bin/phpunit

  tests-chrome-selenium:
    name: "Tests on Chrome stable with Selenium"

    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version:
          - 7.2
          - 7.3
          - 7.4

        dependencies:
          - lowest
          - locked
          - highest

    steps:
      - name: "Initialize containers"
        run: |
          set -eux

          docker pull selenium/standalone-chrome:latest
          container_id=$(docker create \
            --name selenium \
            --network host \
            --health-cmd /opt/bin/check-grid.sh \
            --health-interval 10s \
            --health-timeout 5s \
            --health-retries 5 \
            -e GITHUB_ACTIONS=true \
            selenium/standalone-chrome:latest)

          echo ::set-env name=container_id::${container_id}

          docker start ${container_id}

          docker ps --all --filter id=${container_id} --filter status=running --no-trunc --format "{{.ID}} {{.Status}}"

          while status=$(docker inspect --format="{{print .State.Health.Status}}" ${container_id}); \
            [ $status = "starting" ]; do
            echo ${status}
            echo "selenium service is starting, waiting 2 secondes before checking again."
            sleep 2
          done

          if [ $status != "healthy" ]; then
            echo "::error ::Failed to initialize, selenium service is unhealthy."
            exit 1
          fi

          echo "selenium service is healthy."

      - name: "Checkout"
        uses: actions/checkout@v1.1.0

      - name: "Install PHP with extensions"
        uses: shivammathur/setup-php@1.5.5
        with:
          coverage: none
          extension-csv: dom, iconv, json, libxml, mbstring, Phar, SimpleXML, tokenizer, xml, xmlwriter, zip
          php-version: ${{ matrix.php-version }}

      - name: "Cache dependencies installed with composer"
        uses: actions/cache@v1.0.0
        with:
          path: ~/.composer/cache
          key: php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            php${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-

      - name: "Install lowest dependencies with composer"
        if: matrix.dependencies == 'lowest'
        run: $(which composer) update --no-interaction --no-progress --no-suggest --prefer-lowest

      - name: "Install locked dependencies with composer"
        if: matrix.dependencies == 'locked'
        run: $(which composer) install --no-interaction --no-progress --no-suggest

      - name: "Install highest dependencies with composer"
        if: matrix.dependencies == 'highest'
        run: $(which composer) update --no-interaction --no-progress --no-suggest

      - name: "Run unit tests with phpunit/phpunit"
        env:
          BROWSER_NAME: chrome
          SELENIUM_HOST: localhost
          SELENIUM_PORT: 4444
        run: |
          vendor/bin/mink-test-server > /dev/null 2>&1 &
          vendor/bin/phpunit

      - name: "Stop containers"
        if: always()
        run: docker rm --force ${container_id}

  code-coverage:
    name: "Code Coverage"

    runs-on: ubuntu-latest

    env:
      PANTHER_CHROME_DRIVER_BINARY: .build/chromedriver/chromedriver

    steps:
      - name: "Checkout"
        uses: actions/checkout@v1.1.0

      - name: "Install PHP with extensions"
        uses: shivammathur/setup-php@1.5.5
        with:
          coverage: xdebug
          extension-csv: dom, iconv, json, libxml, mbstring, Phar, SimpleXML, tokenizer, xml, xmlwriter, zip
          php-version: 7.4

      - name: "Install chromedriver"
        run: |
          mkdir -p .build/chromedriver
          chromeversion=$(google-chrome --product-version)
          chromeversion=${chromeversion%.*}
          curl -LsS -o .build/chromedriver/chromedriver.zip https://chromedriver.storage.googleapis.com/$(curl -L https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${chromeversion})/chromedriver_linux64.zip
          unzip .build/chromedriver/chromedriver.zip -d .build/chromedriver

      - name: "Cache dependencies installed with composer"
        uses: actions/cache@v1.0.2
        with:
          path: ~/.composer/cache
          key: php7.4-composer-locked-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            php7.4-composer-locked-

      - name: "Install locked dependencies with composer"
        run: $(which composer) install --no-interaction --no-progress --no-suggest

      - name: "Dump Xdebug filter with phpunit/phpunit"
        run: vendor/bin/phpunit --dump-xdebug-filter=.build/phpunit/xdebug-filter.php

      - name: "Collect code coverage with Xdebug and phpunit/phpunit"
        run: |
          vendor/bin/mink-test-server > /dev/null 2>&1 &
          vendor/bin/phpunit --coverage-clover=build/logs/clover.xml --prepend=.build/phpunit/xdebug-filter.php

      - name: "Send code coverage report to Codecov.io"
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash)
